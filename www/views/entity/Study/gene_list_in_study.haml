- action_card = ActionCard.new 

- action_card.require :list do
  = action_parameters do
    - input :list, :select, "Gene list", nil, :html_options => {:class => 'favourite_lists', :type => "Gene"}

= action_card_render action_card do
  - gene_list = list
  - list = Entity::List.load_list("Gene", gene_list, user)
  - organism = list.organism
  - genes = Gene.setup(Translation.job(:translate, gene_list, :genes => list, :organism =>organism).run, "Ensembl Gene ID", organism)
  - study = entity

  - if study.has_genotypes? and study.all_mutations.length < 100_000

    %h4 Genotype overview
    - overview = study.job(:genotype_overview).run
    - begin
      - info_list = overview.values_at(*list.ensembl).compact
      - num_samples = study.samples.select_by(:has_genotype?).length
      - if info_list.empty? or num_samples == 0
        %p No matches
      - else
        %dl
          %dt Mutations
          %dd= study.mutations_over_gene_list(list).list_link :length, "Mutations over #{ gene_list } in #{ entity }"

          %dt Samples
          %dd= num_samples

          %dt Samples with gene list mutated
          %dd= Sample.setup(info_list.collect{|info| info[0]}.compact.flatten.uniq, study).list_link("%.3g" % ((list_length = info_list.collect{|info| info[0]}.compact.flatten.uniq.length).to_f * 100 / num_samples) + " % (#{list_length})", "Samples with #{gene_list} mutated in #{ study }")
          
          %dt Samples with gene list affected
          %dd= Sample.setup(info_list.collect{|info| info[1]}.compact.flatten.uniq, study).list_link("%.3g" % ((list_length = info_list.collect{|info| info[1]}.compact.flatten.uniq.length).to_f * 100 / num_samples) + " % (#{list_length})", "Samples with #{gene_list} affected in #{ study }")

          %dt Samples with gene list damaged
          %dd= Sample.setup(info_list.collect{|info| info[2]}.compact.flatten.uniq, study).list_link("%.3g" % ((list_length = info_list.collect{|info| info[2]}.compact.flatten.uniq.length).to_f * 100 / num_samples) + " % (#{list_length})", "Samples with #{gene_list} damaged in #{ study }")
    

    %dl.tabs

      - sorted_genes = genes & overview.keys

      - sorted_genes = sorted_genes.sort do |a,b| 
        - sa = overview[a][3].first == "> 0.1" ? 1 : overview[a][3].first.to_f
        - sb = overview[b][3].first == "> 0.1" ? 1 : overview[b][3].first.to_f
        - if sa == sb
          - overview[b][1].length <=> overview[a][1].length
        - else
          - sa <=> sb

      - sorted_genes = genes.annotate sorted_genes
      - sorted_genes.extend AnnotatedArray
      - sorted_genes.each do |gene|
        - gene_overview = overview[gene.ensembl]
        %dt= gene.name
        %dd
          %h5= gene.link
          %dl
            %dt Samples with gene mutated
            - if gene_overview[0].any?
              %dd= Sample.setup(gene_overview[0], entity).list_link :length, "Samples with mutations over #{gene.name} in #{ entity }"
            - else
              %dd None

            %dt Samples with gene affected
            - if gene_overview[1].any?
              %dd= Sample.setup(gene_overview[1], entity).list_link :length, "Samples with relevant mutations over #{gene.name} in #{ entity }"
            - else
              %dd None

            %dt Samples with gene damaged
            - if gene_overview[2].any?
              %dd= Sample.setup(gene_overview[2], entity).list_link :length, "Samples with damaging mutations over #{gene.name} in #{ entity }"
            - else
              %dd None

            %dt Significance
            - pvalue = gene_overview[3].first
            %dd= Float === pvalue ? "%.5g" % pvalue : pvalue

  - if study.has_cnv?

    %h4 CNV overview
    - overview = study.job(:cnv_overview).run(true).path.tsv(:persist => true, :persist_dir => settings.persistence_dir)
    - overview.unnamed = true
    - begin
      - info_list = overview.values_at(*list.ensembl).compact
      - num_samples = study.samples.select_by(:has_cnv?).length
      - if info_list.empty? or num_samples == 0
        %p No matches
      - else
        %dl

          %dt Samples
          %dd= num_samples

          %dt Samples with gene list lost
          %dd= Sample.setup(info_list.collect{|info| info[0]}.compact.flatten.uniq, study).list_link("%.3g" % ((list_length = info_list.collect{|info| info[0]}.compact.flatten.uniq.length).to_f * 100 / num_samples) + " % (#{list_length})", "Samples with #{gene_list} lost in #{ study }")
          
          %dt Samples with gene list gained
          %dd= Sample.setup(info_list.collect{|info| info[1]}.compact.flatten.uniq, study).list_link("%.3g" % ((list_length = info_list.collect{|info| info[1]}.compact.flatten.uniq.length).to_f * 100 / num_samples) + " % (#{list_length})", "Samples with #{gene_list} gained in #{ study }")

    %dl.tabs
      - genes.select{|gene| overview.include? gene }.sort_by{|gene| overview[gene].flatten.length}.reverse.each do |gene|
        - gene_overview = overview[gene.ensembl]
        %dt= gene.name
        %dd
          %h5= gene.link
          %dl
            %dt Samples with gene lost
            - if not gene_overview[0].empty?
              %dd= Sample.setup(gene_overview[0], entity).list_link :length, "Samples with #{gene.name} lost in #{ entity }"
            - else
              %dd None

            %dt Samples with gene gained
            - if not gene_overview[1].empty?
              %dd= Sample.setup(gene_overview[1], entity).list_link :length, "Samples with #{gene.name} gained in #{ entity }"
            - else
              %dd None

